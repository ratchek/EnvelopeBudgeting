openapi: 3.0.0
info:
  description: "An API for an envelope-based budgeting system. You can read more about the idea behind this here: [https://www.investopedia.com/envelope-budgeting-system-5208026](https://web.archive.org/web/20240124192318/https://www.investopedia.com/envelope-budgeting-system-5208026)"
  version: 0.0.1
  title: Envelope Budgeting
  termsOfService: http://TODO
  contact:
    email: mail@ratchek.com
  license:
    name: TODO
    url: http://TODO
externalDocs:
  description: Find out more about our budgeting API
  url: http://TODO
servers:
  - url: http://TODO
tags:
  - name: envelope
    description: Manage your envelopes
    externalDocs:
      description: TODO
      url: http://TODO
  - name: transaction
    description: Spend funds from one of your envelopes
    externalDocs:
      description: TODO
      url: http://TODO
paths:
  /envelopes:
    get:
      tags:
        - envelope
      summary: Get all the envelopes
      description: Returns an array of all the envelopes
      operationId: getListOfEnvelopeIds
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Envelope'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Envelope'
    post:
      tags:
        - envelope
      summary: Create a new envelope
      description: Creates a new envelope with the given name and amount
      operationId: createEnvelope
      requestBody:
        description: Envelope object that needs to be added to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Envelope'
          application/xml:
            schema:
              $ref: '#/components/schemas/Envelope'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
            application/xml:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          description: Invalid envelope supplied
  /envelopes/{envelopeID}:
    get:
      tags:
        - envelope
      summary: Get envelope by ID
      description: Returns a single envelope
      operationId: getEnvelopeById
      parameters:
        - name: envelopeID
          in: path
          description: ID of envelope to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
            application/xml:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          description: Invalid ID supplied
        '404':
          description: Envelope not found
    put:
      tags:
        - envelope
      summary: Update an existing envelope
      description: Updates an existing envelope with the given name and amount
      operationId: updateEnvelopebyId
      parameters:
        - name: envelopeID
          in: path
          description: ID of envelope to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Envelope object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Envelope'
          application/xml:
            schema:
              $ref: '#/components/schemas/Envelope'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
            application/xml:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          description: Invalid ID supplied
        '404':
          description: Envelope not found
    delete:
      tags:
        - envelope
      summary: Delete an envelope
      description: Deletes an envelope
      operationId: deleteEnvelopebyID
      parameters:
        - name: envelopeID
          in: path
          description: ID of envelope to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Envelope not found
  /transactions:
    get:
      tags:
        - transaction
      summary: Get all the transactions
      description: Returns an array of all the transactions
      operationId: getListOfTransactions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    post:
      tags:
        - transaction
      summary: Create a new transaction
      description: Creates a new transaction in an envelope with the given name, amount, dollars/cents spent, date, and notes
      operationId: createTransaction
      requestBody:
        description: Transaction object that needs to be added to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/xml:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
            application/xml:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid transaction supplied
  /transactions/{transactionID}:
    get:
      tags:
        - transaction
      summary: Get transaction by ID
      description: Returns a single transaction
      operationId: getTransactionById
      parameters:
        - name: transactionID
          in: path
          description: ID of transaction to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
            application/xml:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid ID supplied
        '404':
          description: Transaction not found
    put:
      tags:
        - transaction
      summary: Update an existing transaction
      description: Updates an existing transaction with the given name, amount, dollars/cents spent, date, and notes
      operationId: updateTransactionbyId
      parameters:
        - name: transactionID
          in: path
          description: ID of transaction to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Transaction object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/xml:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
            application/xml:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid ID supplied
        '404':
          description: Transaction not found
    delete:
      tags:
        - transaction
      summary: Delete a transaction
      description: Deletes a transaction
      operationId: deleteTransactionbyID
      parameters:
        - name: transactionID
          in: path
          description: ID of transaction to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Transaction not found

components:
  schemas:
    Envelope:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        envelopeName:
          type: string
          example: utilities
        dollarsInEnvelope:
          type: integer
          format: int64
          example: 300
        centsInEnvelope:
          type: integer
          format: int32
          example: 15
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        envelopeID:
          type: integer
          format: int64
          example: 123456
        transactionName:
          type: string
          example: electric bill
        dollarsSpent:
          type: integer
          format: int64
          example: 100
        centsSpent:
          type: integer
          format: int32
          example: 0
        date:
          type: string
          format: date
          example: 2022-01-01
        notes:
          type: string
          example: paid with credit card